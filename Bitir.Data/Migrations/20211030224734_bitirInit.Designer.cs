// <auto-generated />
using System;
using Bitir.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bitir.Data.Migrations
{
    [DbContext(typeof(BitirMainContext))]
    [Migration("20211030224734_bitirInit")]
    partial class bitirInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccount","auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountTypeId = 1,
                            Email = "t@t.com",
                            InsertDate = new DateTime(2021, 10, 31, 1, 47, 34, 466, DateTimeKind.Local).AddTicks(3001),
                            Name = "test",
                            PasswordHash = new byte[] { 1, 154, 200, 3, 222, 206, 114, 208, 177, 173, 154, 242, 230, 52, 187, 246, 23, 236, 212, 73, 106, 72, 171, 240, 1, 248, 204, 92, 137, 99, 9, 16, 126, 43, 204, 152, 38, 60, 147, 130, 199, 116, 218, 75, 177, 61, 184, 78, 103, 220, 200, 60, 151, 210, 161, 216, 25, 65, 245, 1, 115, 67, 195, 196 },
                            PasswordSalt = new byte[] { 156, 94, 85, 179, 227, 171, 205, 189, 83, 3, 121, 0, 100, 62, 95, 31, 135, 130, 122, 114, 6, 203, 227, 21, 133, 181, 98, 241, 120, 96, 199, 37, 39, 111, 192, 141, 1, 228, 120, 249, 142, 103, 236, 97, 80, 137, 204, 120, 28, 201, 116, 175, 36, 205, 123, 183, 78, 164, 31, 239, 110, 107, 169, 235, 176, 127, 81, 66, 154, 152, 10, 214, 146, 247, 39, 157, 12, 116, 150, 120, 172, 159, 111, 203, 104, 248, 177, 59, 72, 128, 98, 157, 39, 139, 33, 150, 119, 203, 176, 131, 239, 232, 197, 142, 218, 165, 122, 136, 64, 190, 198, 209, 42, 73, 220, 234, 49, 186, 1, 243, 11, 68, 193, 83, 52, 209, 36, 3 },
                            Phone = "505",
                            Status = 1,
                            Surname = "test",
                            UpdateDate = new DateTime(2021, 10, 31, 1, 47, 34, 466, DateTimeKind.Local).AddTicks(8831),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccountTypeId = 2,
                            Email = "q@q.com",
                            InsertDate = new DateTime(2021, 10, 31, 1, 47, 34, 466, DateTimeKind.Local).AddTicks(9928),
                            Name = "Vendor",
                            PasswordHash = new byte[] { 1, 154, 200, 3, 222, 206, 114, 208, 177, 173, 154, 242, 230, 52, 187, 246, 23, 236, 212, 73, 106, 72, 171, 240, 1, 248, 204, 92, 137, 99, 9, 16, 126, 43, 204, 152, 38, 60, 147, 130, 199, 116, 218, 75, 177, 61, 184, 78, 103, 220, 200, 60, 151, 210, 161, 216, 25, 65, 245, 1, 115, 67, 195, 196 },
                            PasswordSalt = new byte[] { 156, 94, 85, 179, 227, 171, 205, 189, 83, 3, 121, 0, 100, 62, 95, 31, 135, 130, 122, 114, 6, 203, 227, 21, 133, 181, 98, 241, 120, 96, 199, 37, 39, 111, 192, 141, 1, 228, 120, 249, 142, 103, 236, 97, 80, 137, 204, 120, 28, 201, 116, 175, 36, 205, 123, 183, 78, 164, 31, 239, 110, 107, 169, 235, 176, 127, 81, 66, 154, 152, 10, 214, 146, 247, 39, 157, 12, 116, 150, 120, 172, 159, 111, 203, 104, 248, 177, 59, 72, 128, 98, 157, 39, 139, 33, 150, 119, 203, 176, 131, 239, 232, 197, 142, 218, 165, 122, 136, 64, 190, 198, 209, 42, 73, 220, 234, 49, 186, 1, 243, 11, 68, 193, 83, 52, 209, 36, 3 },
                            Phone = "505",
                            Status = 1,
                            Surname = "test",
                            UpdateDate = new DateTime(2021, 10, 31, 1, 47, 34, 466, DateTimeKind.Local).AddTicks(9933),
                            Username = "vendor"
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress","auth");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken","auth");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Category","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2021, 10, 31, 1, 47, 34, 471, DateTimeKind.Local).AddTicks(6858),
                            Name = "Süt Ürünleri",
                            Status = 1,
                            SubCategoryId = 0,
                            UpdateDate = new DateTime(2021, 10, 31, 1, 47, 34, 471, DateTimeKind.Local).AddTicks(6887)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Günlük İnek Sütü",
                            InsertDate = new DateTime(2021, 10, 31, 1, 47, 34, 475, DateTimeKind.Local).AddTicks(2718),
                            Name = "Süt",
                            Status = 1,
                            UpdateDate = new DateTime(2021, 10, 31, 1, 47, 34, 475, DateTimeKind.Local).AddTicks(2726)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductQuantity","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2021, 10, 31, 1, 47, 34, 479, DateTimeKind.Local).AddTicks(1460),
                            ProductId = 1,
                            Quantity = 1m,
                            Status = 1,
                            UnitId = 1,
                            UpdateDate = new DateTime(2021, 10, 31, 1, 47, 34, 479, DateTimeKind.Local).AddTicks(1466)
                        },
                        new
                        {
                            Id = 2,
                            InsertDate = new DateTime(2021, 10, 31, 1, 47, 34, 479, DateTimeKind.Local).AddTicks(1527),
                            ProductId = 1,
                            Quantity = 2m,
                            Status = 1,
                            UnitId = 1,
                            UpdateDate = new DateTime(2021, 10, 31, 1, 47, 34, 479, DateTimeKind.Local).AddTicks(1529)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("ProductStoreId");

                    b.ToTable("ProductStock","product");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStorePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductStoreId");

                    b.ToTable("ProductPrice","product");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product_Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantityId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductQuantityId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductStore","product");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.StoreProductByCarrierViewModel", b =>
                {
                    b.Property<int>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductStockId");

                    b.ToTable("StoreProductByCarrierViewModel");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.StoreProductByStoreViewModel", b =>
                {
                    b.Property<int>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductStockId");

                    b.ToTable("StoreProductByStoreViewModel");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.StoreProductViewModel", b =>
                {
                    b.Property<int>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductPriceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductStockId");

                    b.ToTable("StoreProductViewModel");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Unit","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "lt",
                            InsertDate = new DateTime(2021, 10, 31, 1, 47, 34, 477, DateTimeKind.Local).AddTicks(9356),
                            Name = "Litre",
                            Status = 1,
                            UpdateDate = new DateTime(2021, 10, 31, 1, 47, 34, 477, DateTimeKind.Local).AddTicks(9364)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Carrier","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Carrier_Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("StoreId");

                    b.ToTable("Carrier_Store","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("UserAddressId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductStoreId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Order","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Store","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.StoreOrderViewModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("OrderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderDistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderProvinceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantityId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<string>("ProductUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductUnitAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("UserAddressId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("StoreOrderViewModel");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Store_UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Store_UserAccount","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.District", b =>
                {
                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserAddress", b =>
                {
                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("UserAddress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserToken", b =>
                {
                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductQuantity", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product", "Product")
                        .WithMany("ProductQuantity")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Unit", "Unit")
                        .WithMany("ProductQuantities")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStock", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Carrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierId");

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product_Store", "ProductStore")
                        .WithMany()
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStorePrice", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product_Store", "ProductStore")
                        .WithMany("ProductStorePrices")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product_Store", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product", null)
                        .WithMany("ProductStores")
                        .HasForeignKey("ProductId");

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.ProductQuantity", "ProductQuantity")
                        .WithMany("Product_Stores")
                        .HasForeignKey("ProductQuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", "Store")
                        .WithMany("ProductStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Carrier_Store", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Carrier", "Carrier")
                        .WithMany("Carrier_Stores")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", "Store")
                        .WithMany("Carrier_Stores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Order", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product_Store", "Product_Store")
                        .WithMany("Order")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", null)
                        .WithMany("Order")
                        .HasForeignKey("StoreId");

                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Store_UserAccount", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", "Store")
                        .WithMany("Store_UserAccounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("Store_UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
