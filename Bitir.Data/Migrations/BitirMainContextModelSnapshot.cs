// <auto-generated />
using System;
using Bitir.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bitir.Data.Migrations
{
    [DbContext(typeof(BitirMainContext))]
    partial class BitirMainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District","auth");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.Neighbourhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("LocalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Neighbourhood","auth");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province","auth");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccount","auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountTypeId = 1,
                            Email = "t@t.com",
                            InsertDate = new DateTime(2021, 11, 14, 23, 5, 53, 62, DateTimeKind.Local).AddTicks(907),
                            Name = "test",
                            PasswordHash = new byte[] { 68, 109, 248, 197, 240, 224, 22, 90, 24, 136, 67, 243, 154, 70, 111, 93, 148, 222, 61, 183, 100, 227, 247, 83, 176, 27, 211, 154, 132, 190, 32, 210, 140, 207, 100, 178, 220, 3, 37, 101, 227, 121, 214, 206, 107, 241, 235, 4, 126, 62, 222, 89, 245, 211, 152, 249, 39, 89, 18, 193, 134, 7, 160, 146 },
                            PasswordSalt = new byte[] { 250, 82, 152, 81, 97, 102, 44, 187, 135, 2, 213, 186, 7, 77, 21, 214, 165, 156, 34, 35, 178, 19, 65, 6, 10, 230, 30, 137, 35, 208, 128, 181, 230, 95, 129, 91, 247, 95, 121, 12, 96, 70, 79, 134, 240, 150, 207, 140, 220, 142, 128, 131, 14, 33, 62, 82, 250, 91, 193, 172, 89, 178, 92, 214, 222, 149, 117, 54, 225, 250, 187, 190, 217, 114, 249, 202, 11, 143, 128, 138, 25, 154, 17, 129, 22, 47, 54, 146, 75, 167, 17, 50, 132, 92, 157, 239, 158, 195, 126, 247, 177, 197, 138, 52, 92, 195, 218, 32, 172, 36, 236, 156, 33, 13, 160, 203, 78, 181, 79, 86, 192, 8, 127, 252, 217, 109, 34, 162 },
                            Phone = "505",
                            Status = 1,
                            Surname = "test",
                            UpdateDate = new DateTime(2021, 11, 14, 23, 5, 53, 62, DateTimeKind.Local).AddTicks(8458),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccountTypeId = 2,
                            Email = "q@q.com",
                            InsertDate = new DateTime(2021, 11, 14, 23, 5, 53, 62, DateTimeKind.Local).AddTicks(9829),
                            Name = "Vendor",
                            PasswordHash = new byte[] { 68, 109, 248, 197, 240, 224, 22, 90, 24, 136, 67, 243, 154, 70, 111, 93, 148, 222, 61, 183, 100, 227, 247, 83, 176, 27, 211, 154, 132, 190, 32, 210, 140, 207, 100, 178, 220, 3, 37, 101, 227, 121, 214, 206, 107, 241, 235, 4, 126, 62, 222, 89, 245, 211, 152, 249, 39, 89, 18, 193, 134, 7, 160, 146 },
                            PasswordSalt = new byte[] { 250, 82, 152, 81, 97, 102, 44, 187, 135, 2, 213, 186, 7, 77, 21, 214, 165, 156, 34, 35, 178, 19, 65, 6, 10, 230, 30, 137, 35, 208, 128, 181, 230, 95, 129, 91, 247, 95, 121, 12, 96, 70, 79, 134, 240, 150, 207, 140, 220, 142, 128, 131, 14, 33, 62, 82, 250, 91, 193, 172, 89, 178, 92, 214, 222, 149, 117, 54, 225, 250, 187, 190, 217, 114, 249, 202, 11, 143, 128, 138, 25, 154, 17, 129, 22, 47, 54, 146, 75, 167, 17, 50, 132, 92, 157, 239, 158, 195, 126, 247, 177, 197, 138, 52, 92, 195, 218, 32, 172, 36, 236, 156, 33, 13, 160, 203, 78, 181, 79, 86, 192, 8, 127, 252, 217, 109, 34, 162 },
                            Phone = "505",
                            Status = 1,
                            Surname = "test",
                            UpdateDate = new DateTime(2021, 11, 14, 23, 5, 53, 62, DateTimeKind.Local).AddTicks(9836),
                            Username = "vendor"
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress","auth");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken","auth");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Category","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2021, 11, 14, 23, 5, 53, 70, DateTimeKind.Local).AddTicks(6291),
                            Name = "Süt Ürünleri",
                            Status = 1,
                            SubCategoryId = 0,
                            UpdateDate = new DateTime(2021, 11, 14, 23, 5, 53, 70, DateTimeKind.Local).AddTicks(6348)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Günlük İnek Sütü",
                            InsertDate = new DateTime(2021, 11, 14, 23, 5, 53, 74, DateTimeKind.Local).AddTicks(7597),
                            Name = "Süt",
                            Status = 1,
                            UpdateDate = new DateTime(2021, 11, 14, 23, 5, 53, 74, DateTimeKind.Local).AddTicks(7613)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductQuantity","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2021, 11, 14, 23, 5, 53, 79, DateTimeKind.Local).AddTicks(967),
                            ProductId = 1,
                            Quantity = 1m,
                            Status = 1,
                            UnitId = 1,
                            UpdateDate = new DateTime(2021, 11, 14, 23, 5, 53, 79, DateTimeKind.Local).AddTicks(976)
                        },
                        new
                        {
                            Id = 2,
                            InsertDate = new DateTime(2021, 11, 14, 23, 5, 53, 79, DateTimeKind.Local).AddTicks(1067),
                            ProductId = 1,
                            Quantity = 2m,
                            Status = 1,
                            UnitId = 1,
                            UpdateDate = new DateTime(2021, 11, 14, 23, 5, 53, 79, DateTimeKind.Local).AddTicks(1068)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("ProductStoreId");

                    b.ToTable("ProductStock","product");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStorePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductStoreId");

                    b.ToTable("ProductPrice","product");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product_Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantityId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductQuantityId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductStore","product");
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Unit","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "lt",
                            InsertDate = new DateTime(2021, 11, 14, 23, 5, 53, 77, DateTimeKind.Local).AddTicks(7487),
                            Name = "Litre",
                            Status = 1,
                            UpdateDate = new DateTime(2021, 11, 14, 23, 5, 53, 77, DateTimeKind.Local).AddTicks(7498)
                        });
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Carrier","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Carrier_Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("StoreId");

                    b.ToTable("Carrier_Store","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Product_StoreId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("UserAddressId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("Product_StoreId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Order","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductStoreId");

                    b.ToTable("OrderDetail","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Store","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Store_UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Store_UserAccount","sales");
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.District", b =>
                {
                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.Neighbourhood", b =>
                {
                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserAddress", b =>
                {
                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("UserAddress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.AuthModuleEntities.UserToken", b =>
                {
                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductQuantity", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product", "Product")
                        .WithMany("ProductQuantity")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Unit", "Unit")
                        .WithMany("ProductQuantities")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStock", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Carrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierId");

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product_Store", "ProductStore")
                        .WithMany()
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.ProductStorePrice", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product_Store", "ProductStore")
                        .WithMany("ProductStorePrices")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.ProductModuleEntities.Product_Store", b =>
                {
                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product", null)
                        .WithMany("ProductStores")
                        .HasForeignKey("ProductId");

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.ProductQuantity", "ProductQuantity")
                        .WithMany("Product_Stores")
                        .HasForeignKey("ProductQuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", "Store")
                        .WithMany("ProductStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Carrier_Store", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Carrier", "Carrier")
                        .WithMany("Carrier_Stores")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", "Store")
                        .WithMany("Carrier_Stores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Order", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Carrier", "Carrier")
                        .WithMany("Orders")
                        .HasForeignKey("CarrierId");

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product_Store", null)
                        .WithMany("Order")
                        .HasForeignKey("Product_StoreId");

                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", null)
                        .WithMany("Order")
                        .HasForeignKey("StoreId");

                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.OrderDetail", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.ProductModuleEntities.Product_Store", "Product_Store")
                        .WithMany()
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Shared.Entities.SalesModuleEntities.Store_UserAccount", b =>
                {
                    b.HasOne("Module.Shared.Entities.SalesModuleEntities.Store", "Store")
                        .WithMany("Store_UserAccounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Shared.Entities.AuthModuleEntities.UserAccount", "UserAccount")
                        .WithMany("Store_UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
